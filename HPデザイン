// app/page.tsx
'use client'

import { useState } from 'react'
import styles from './page.module.css'

export default function Home() {
  const [input, setInput] = useState('')
  const [article, setArticle] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  const generateArticle = async () => {
    if (!input.trim()) {
      setError('入力内容を入力してください')
      return
    }

    setLoading(true)
    setError('')
    setArticle('')

    try {
      const response = await fetch('/api/generate-article', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ input: input.trim() }),
      })

      if (!response.ok) {
        throw new Error('記事生成に失敗しました')
      }

      const data = await response.json()
      setArticle(data.article)
    } catch (err) {
      setError(err instanceof Error ? err.message : '不明なエラーが発生しました')
    } finally {
      setLoading(false)
    }
  }

  const clearAll = () => {
    setInput('')
    setArticle('')
    setError('')
  }

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(article)
      alert('記事をクリップボードにコピーしました！')
    } catch (err) {
      alert('コピーに失敗しました')
    }
  }

  return (
    <div className={styles.container}>
      <main className={styles.main}>
        <h1 className={styles.title}>
          AI記事生成アプリ
        </h1>

        <p className={styles.description}>
          記事にしたい内容を入力してください
        </p>

        <div className={styles.inputSection}>
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="例: 人工知能の未来について、環境問題の解決策、健康的な生活習慣など..."
            rows={4}
            className={styles.textarea}
            disabled={loading}
          />
          
          <div className={styles.buttons}>
            <button
              onClick={generateArticle}
              disabled={loading || !input.trim()}
              className={`${styles.button} ${styles.generateButton}`}
            >
              {loading ? '記事生成中...' : '記事を生成'}
            </button>
            
            <button
              onClick={clearAll}
              className={`${styles.button} ${styles.clearButton}`}
              disabled={loading}
            >
              クリア
            </button>
          </div>
        </div>

        {error && (
          <div className={styles.error}>
            <p>エラー: {error}</p>
          </div>
        )}

        {loading && (
          <div className={styles.loading}>
            <div className={styles.spinner}></div>
            <p>記事を生成しています...</p>
          </div>
        )}

        {article && (
          <div className={styles.articleSection}>
            <h2>生成された記事</h2>
            <div className={styles.article}>
              <pre>{article}</pre>
            </div>
            <button
              onClick={copyToClipboard}
              className={`${styles.button} ${styles.copyButton}`}
            >
              記事をコピー
            </button>
          </div>
        )}
      </main>
    </div>
  )
}

// app/api/generate-article/route.ts
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { input } = await request.json()

    if (!input) {
      return NextResponse.json(
        { message: '入力内容が必要です' },
        { status: 400 }
      )
    }

    // OpenAI APIキーの確認
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY環境変数が設定されていません')
    }

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'あなたは優秀なライターです。与えられたトピックについて、構造化された読みやすい記事を日本語で書いてください。見出しを使って内容を整理し、読者にとって価値のある情報を提供してください。'
          },
          {
            role: 'user',
            content: `次のトピックについて記事を書いてください: ${input}`
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      }),
    })

    if (!response.ok) {
      const errorData = await response.json()
      throw new Error(`OpenAI API Error: ${errorData.error?.message || 'Unknown error'}`)
    }

    const data = await response.json()
    const article = data.choices[0]?.message?.content || '記事の生成に失敗しました。'

    return NextResponse.json({ article })
  } catch (error) {
    console.error('Error generating article:', error)
    return NextResponse.json(
      { 
        message: 'サーバーエラーが発生しました',
        error: error instanceof Error ? error.message : '不明なエラー'
      },
      { status: 500 }
    )
  }
}

// app/page.module.css
.container {
  padding: 0 2rem;
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
}

.title {
  margin: 0 0 1rem;
  line-height: 1.15;
  font-size: 4rem;
  text-align: center;
  color: white;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.description {
  margin: 2rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
  text-align: center;
  color: white;
  opacity: 0.9;
}

.inputSection {
  width: 100%;
  max-width: 800px;
  margin: 2rem 0;
}

.textarea {
  width: 100%;
  padding: 1rem;
  border: none;
  border-radius: 12px;
  font-size: 1rem;
  line-height: 1.5;
  resize: vertical;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  background: white;
  outline: none;
  transition: box-shadow 0.3s ease;
}

.textarea:focus {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
  justify-content: center;
}

.button {
  padding: 0.8rem 2rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-block;
  text-align: center;
}

.generateButton {
  background: #4CAF50;
  color: white;
  box-shadow: 0 4px 6px rgba(76, 175, 80, 0.3);
}

.generateButton:hover:not(:disabled) {
  background: #45a049;
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(76, 175, 80, 0.4);
}

.generateButton:disabled {
  background: #cccccc;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.clearButton {
  background: #f44336;
  color: white;
  box-shadow: 0 4px 6px rgba(244, 67, 54, 0.3);
}

.clearButton:hover:not(:disabled) {
  background: #da190b;
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(244, 67, 54, 0.4);
}

.copyButton {
  background: #2196F3;
  color: white;
  box-shadow: 0 4px 6px rgba(33, 150, 243, 0.3);
  margin-top: 1rem;
}

.copyButton:hover {
  background: #1976D2;
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(33, 150, 243, 0.4);
}

.error {
  background: #ffebee;
  border: 1px solid #e57373;
  border-radius: 8px;
  padding: 1rem;
  margin: 1rem 0;
  max-width: 800px;
  width: 100%;
}

.error p {
  color: #c62828;
  margin: 0;
  font-weight: 500;
}

.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 2rem 0;
  color: white;
}

.spinner {
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-top: 4px solid #fff;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.articleSection {
  width: 100%;
  max-width: 800px;
  margin: 2rem 0;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.articleSection h2 {
  color: white;
  margin-bottom: 1rem;
  font-size: 2rem;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.article {
  width: 100%;
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  margin-bottom: 1rem;
}

.article pre {
  white-space: pre-wrap;
  word-wrap: break-word;
  line-height: 1.6;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  font-size: 1rem;
  color: #333;
}

@media (max-width: 768px) {
  .title {
    font-size: 3rem;
  }
  
  .description {
    font-size: 1.2rem;
  }
  
  .buttons {
    flex-direction: column;
    align-items: center;
  }
  
  .button {
    width: 100%;
    max-width: 300px;
  }
}

// package.json
{
  "name": "ai-article-generator",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "^15.0.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/node": "^20.10.6",
    "@types/react": "^18.2.46",
    "@types/react-dom": "^18.2.18",
    "eslint": "^8.56.0",
    "eslint-config-next": "^15.0.3",
    "typescript": "^5.3.3"
  }
}

// app/layout.tsx
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'AI記事生成アプリ',
  description: 'OpenAI APIを使用した記事生成アプリ',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ja">
      <body>{children}</body>
    </html>
  )
}

// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig

// .env.local (環境変数ファイル - 実際の値に置き換えてください)
OPENAI_API_KEY=your_openai_api_key_here

// tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
